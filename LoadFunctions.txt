#Write-Host "`n - Retrieving Maule Technologies PowerShell Functions via Git -"
Set-ExecutionPolicy Bypass -Scope Process -Force

# Adds fancy checkmark :D
$greenCheck = @{
    Object = [Char]8730
    ForegroundColor = 'Green'
    NoNewLine = $true
}
$progressPreference = 'Continue'

# Set default IT folder path if not already defined
if (-not $ITFolder) {
    $ITFolder = "$Env:SystemDrive\IT"
}

#Enable TLS
[System.Net.ServicePointManager]::SecurityProtocol = 3072 -bor 768 -bor 192

# Function to check if git is installed
Function Test-GitInstalled {
    param([string]$GitPath = "$ITFolder\GitHub\PortableGit\bin\git.exe")
    
    if (Test-Path $GitPath) {
        return $true
    }
    
    # Also check system PATH
    try {
        $null = git --version 2>$null
        return $true
    }
    catch {
        return $false
    }
}

# Function to install Git Portable
Function Install-GitPortable {
    $GitFolder = "$ITFolder\GitHub\PortableGit"
    $TempPath = "$env:TEMP\GitPortable"

    try {
        # Create directories if they don't exist
        Write-Host "Creating directories..." -ForegroundColor Green
        New-Item -ItemType Directory -Path $GitFolder -Force | Out-Null
        New-Item -ItemType Directory -Path $TempPath -Force | Out-Null

        # Get latest Git release info from GitHub API
        Write-Host "Fetching latest Git release information..." -ForegroundColor Green
        $LatestRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/git-for-windows/git/releases/latest"
        
        # Extract version from tag (e.g., "v2.50.1.windows.1" -> "2.50.1")
        $LatestVersionRaw = $LatestRelease.tag_name -replace '^v', ''
        # Remove ".windows" and anything after the third dot to get Major.Minor.Build
        $LatestVersionParts = $LatestVersionRaw -split '\.'
        $LatestVersion = "$($LatestVersionParts[0]).$($LatestVersionParts[1]).$($LatestVersionParts[2])"
        
        # Check if Git is already installed and up to date
        $GitExePath = "$GitFolder\bin\git.exe"
        if (Test-Path $GitExePath) {
            Write-Host "Found existing Git installation, checking version..." -ForegroundColor Yellow
            
            try {
                $CurrentVersionInfo = (Get-Item $GitExePath).VersionInfo
                # Use Major.Minor.Build only (ignore Revision)
                $CurrentVersion = "$($CurrentVersionInfo.ProductMajorPart).$($CurrentVersionInfo.ProductMinorPart).$($CurrentVersionInfo.ProductBuildPart)"
                
                Write-Host "Current version: $CurrentVersion" -ForegroundColor Cyan
                Write-Host "Latest version:  $LatestVersion" -ForegroundColor Cyan
                
                # Compare versions using Major.Minor.Build only
                if ([System.Version]$CurrentVersion -ge [System.Version]$LatestVersion) {
                    Write-Host "✓ Git Portable is already up to date!" -ForegroundColor Green
                    Write-Host "No download needed." -ForegroundColor Green
                    return $true
                } else {
                    Write-Host "→ Update available, proceeding with download..." -ForegroundColor Yellow
                }
            } catch {
                Write-Host "⚠ Could not determine current version, proceeding with download..." -ForegroundColor Yellow
            }
        } else {
            Write-Host "Git Portable not found, proceeding with fresh installation..." -ForegroundColor Yellow
        }
        
        # Find the portable x64 asset
        $PortableAsset = $LatestRelease.assets | Where-Object { 
            $_.name -like "PortableGit*64-bit*" -and $_.name -like "*.exe"
        }
        
        if (-not $PortableAsset) {
            throw "Could not find Git Portable 64-bit asset in latest release"
        }
        
        $DownloadUrl = $PortableAsset.browser_download_url
        $FileName = $PortableAsset.name
        $FilePath = "$TempPath\$FileName"
        
        Write-Host "Found: $FileName" -ForegroundColor Yellow
        Write-Host "Downloading from: $DownloadUrl" -ForegroundColor Yellow
        
        # Download the file
        Write-Host "Downloading Git Portable..." -ForegroundColor Green
        $ProgressPreference = 'SilentlyContinue'  # Disable progress bar for faster download
        Invoke-WebRequest -Uri $DownloadUrl -OutFile $FilePath
        $ProgressPreference = 'Continue'  # Re-enable progress bar
        
        Write-Host "Download completed: $([math]::Round((Get-Item $FilePath).Length / 1MB, 2)) MB" -ForegroundColor Green
        
        # Extract the 7zip self-extractor
        Write-Host "Extracting Git Portable to $GitFolder..." -ForegroundColor Green
        
        # 7zip parameters: -y = assume Yes on all queries, -o = output directory (no space after -o)
        $ProcessArgs = @{
            FilePath = $FilePath
            ArgumentList = "-y", "-o$GitFolder"
            Wait = $true
            NoNewWindow = $true
        }
        
        $Process = Start-Process @ProcessArgs -PassThru
        
        # Wait for extraction to complete
        $Process.WaitForExit()
        
        if ($Process.ExitCode -ne 0) {
            throw "7zip extraction failed with exit code: $($Process.ExitCode)"
        }
        
        # Verify extraction
        $GitExePath = "$GitFolder\bin\git.exe"
        if (Test-Path $GitExePath) {
            Write-Host "✓ Git Portable successfully extracted!" -ForegroundColor Green
            
            # Get Git version
            $GitVersion = & "$GitExePath" --version
            Write-Host "✓ Installed version: $GitVersion" -ForegroundColor Green
            
            # Add to PATH for current session
            $env:PATH += ";$GitFolder\bin"
            Write-Host "✓ Added to current session PATH" -ForegroundColor Green
            
        } else {
            throw "Git executable not found after extraction"
        }
        
        # Cleanup
        Write-Host "Cleaning up temporary files..." -ForegroundColor Green
        Remove-Item -Path $TempPath -Recurse -Force
        
        Write-Host "`n=== Git Installation Complete ===" -ForegroundColor Cyan
        Write-Host "Git Portable Location: $GitFolder" -ForegroundColor White
        Write-Host "Git Executable: $GitExePath" -ForegroundColor White
        
        return $true
        
    } catch {
        Write-Error "Failed to download/extract Git Portable: $($_.Exception.Message)"
        return $false
    }
}

# Check PowerShell version to handle certificate validation appropriately
if ($PSVersionTable.PSVersion.Major -lt 6) {
    # PowerShell 5.1 and below - Use the original method
    If (-not ([System.Management.Automation.PSTypeName]'ServerCertificateValidationCallback').Type) {
        $certCallback = @"
            using System;
            using System.Net;
            using System.Net.Security;
            using System.Security.Cryptography.X509Certificates;
            public class ServerCertificateValidationCallback
            {
                public static void Ignore()
                {
                    if(ServicePointManager.ServerCertificateValidationCallback ==null)
                    {
                        ServicePointManager.ServerCertificateValidationCallback +=
                            delegate
                            (
                                Object obj,
                                X509Certificate certificate,
                                X509Chain chain,
                                SslPolicyErrors errors
                            )
                            {
                                return true;
                            };
                    }
                }
            }
"@
        Add-Type $certCallback
        [ServerCertificateValidationCallback]::Ignore()
    }

    #Enable SSL/TLS for PS 5.1
    Try {
        # Set TLS 1.2 (3072), then TLS 1.1 (768), then TLS 1.0 (192)
        [System.Net.ServicePointManager]::SecurityProtocol = 3072 -bor 768 -bor 192
    } Catch {
        Write-Output 'Unable to set PowerShell to use TLS 1.2 and TLS 1.1 due to old .NET Framework installed. If you see underlying connection closed or trust errors, you may need to upgrade to .NET Framework 4.5+ and PowerShell v3+.'
    }
}

# Set up paths
$PWSHFolder = "$ITFolder\GitHub\PWSH"
$FunctionsFolder = "$PWSHFolder\Functions"
$GitExePath = "$ITFolder\GitHub\PortableGit\bin\git.exe"

# Ensure git is installed
if (-not (Test-GitInstalled)) {
    if (-not (Install-GitPortable)) {
        Write-Host "Cannot proceed without Git. Exiting." -ForegroundColor Red
        return
    }
}

# Set git executable path for this session
if (Test-Path $GitExePath) {
    $env:PATH += ";$ITFolder\GitHub\PortableGit\bin"
}

# Clone or update repository
if (Test-Path $PWSHFolder) {
    # Repository exists, update it forcefully
    Write-Host "Updating existing PowerShell Functions repository..." -ForegroundColor Yellow
    try {
        Push-Location $PWSHFolder
        if (Test-Path $GitExePath) {
            & $GitExePath fetch origin 2>$null
            & $GitExePath reset --hard origin/master 2>$null
        } else {
            git fetch origin 2>$null
            git reset --hard origin/master 2>$null
        }
        Write-Host "Repository updated successfully!" -ForegroundColor Green
        Pop-Location
    }
    catch {
        Write-Host "Failed to update repository: $_" -ForegroundColor Red
        Pop-Location
        return
    }
} else {
    # Repository doesn't exist, clone it
    Write-Host "Cloning PowerShell Functions repository..." -ForegroundColor Yellow
    try {
        New-Item -ItemType Directory -Force -Path "$ITFolder\GitHub" | Out-Null
        if (Test-Path $GitExePath) {
            & $GitExePath clone https://github.com/MauleTech/PWSH.git $PWSHFolder 2>$null
        } else {
            git clone https://github.com/MauleTech/PWSH.git $PWSHFolder 2>$null
        }
        Write-Host "Repository cloned successfully!" -ForegroundColor Green
    }
    catch {
        Write-Host "Failed to clone repository: $_" -ForegroundColor Red
        return
    }
}

# Get all .psm1 files in the Functions folder to import as modules
$FunctionFiles = @()
if (Test-Path $FunctionsFolder) {
    $FunctionFiles = Get-ChildItem -Path $FunctionsFolder -Filter "*.psm1" -File | ForEach-Object { $_.FullName }
}

# Import existing functions first
Function Update-ITPS {
    $FunctionFiles | ForEach-Object {
        If (Test-Path $_ -ErrorAction SilentlyContinue) {
            try {
                Import-Module $_ -Global -Force
            }
            catch {
                Write-Host "Failed to import $_" -ForegroundColor Yellow
            }
        }
    }
}

# Load functions
if ($FunctionFiles.Count -gt 0) {
    Write-Host "Loading PowerShell Functions..." -ForegroundColor Yellow
    Update-ITPS
    
    # Check if modules were loaded successfully
    $LoadedModules = Get-Module | Where-Object { $_.Path -like "$FunctionsFolder*" }
    If ($LoadedModules) {
        Write-Host -NoNewLine " "
        Write-Host @greenCheck
        Write-Host -NoNewLine " $((Get-Command -Module "PS-*" | Sort-Object Name).Count) Functions successfully loaded "
        Write-Host @greenCheck
        Write-Host "`n - Get-ITFunctions to see commands. Update-ITFunctions to load updates.`n"
    } Else {
        Write-Host "Functions were not successfully loaded. Please check the function files." -ForegroundColor Red
    }
} else {
    Write-Host "No .psm1 function files found in $FunctionsFolder" -ForegroundColor Yellow
}
